{"name": "test_vwologin[admin-admin-fail]", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.InvalidSessionIdException: Message: invalid session id\nStacktrace:\n0   chromedriver                        0x00000001010ea65c chromedriver + 4318812\n1   chromedriver                        0x00000001010e2d00 chromedriver + 4287744\n2   chromedriver                        0x0000000100d14644 chromedriver + 296516\n3   chromedriver                        0x0000000100d45940 chromedriver + 497984\n4   chromedriver                        0x0000000100d6f63c chromedriver + 669244\n5   chromedriver                        0x0000000100d6ecb4 chromedriver + 666804\n6   chromedriver                        0x0000000100ce20c0 chromedriver + 90304\n7   chromedriver                        0x00000001010aac40 chromedriver + 4058176\n8   chromedriver                        0x00000001010af160 chromedriver + 4075872\n9   chromedriver                        0x0000000101072e68 chromedriver + 3829352\n10  chromedriver                        0x00000001010afc4c chromedriver + 4078668\n11  chromedriver                        0x0000000101087f08 chromedriver + 3915528\n12  chromedriver                        0x0000000100ce0ad8 chromedriver + 84696\n13  dyld                                0x0000000186533e50 start + 2544", "trace": "self = <tests.vwo_login.test_test.TestVWOLogin object at 0x10bea1f90>\nusername = 'admin', password = 'admin', result = 'fail'\nsetup = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"68c6ce4976ead51edcf2728d69fc0e6d\")>\n\n    @pytest.mark.parametrize(\"username, password,result\", test_get_data())\n    @pytest.mark.usefixtures(\"setup\")\n    #   def test_vwologin(self, setup):\n    def test_vwologin(self, username, password, result, setup):\n        driver = setup\n        loginPage = LoginPage(driver)\n        loginPage.login_to_vwo(username, password)\n        driver.close()\n        time.sleep(5)\n        if result == \"fail\":\n>           error_msg = driver.find_element(By.ID, \"js-notification-box-msg\").text\n\ntest_test.py:33: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n../../venv/lib/python3.11/site-packages/selenium/webdriver/remote/webdriver.py:739: in find_element\n    return self.execute(Command.FIND_ELEMENT, {\"using\": by, \"value\": value})[\"value\"]\n../../venv/lib/python3.11/site-packages/selenium/webdriver/remote/webdriver.py:345: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x10b965110>\nresponse = {'status': 404, 'value': '{\"value\":{\"error\":\"invalid session id\",\"message\":\"invalid session id\",\"stacktrace\":\"0   chro...0000000100ce0ad8 chromedriver + 84696\\\\n13  dyld                                0x0000000186533e50 start + 2544\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.InvalidSessionIdException: Message: invalid session id\nE       Stacktrace:\nE       0   chromedriver                        0x00000001010ea65c chromedriver + 4318812\nE       1   chromedriver                        0x00000001010e2d00 chromedriver + 4287744\nE       2   chromedriver                        0x0000000100d14644 chromedriver + 296516\nE       3   chromedriver                        0x0000000100d45940 chromedriver + 497984\nE       4   chromedriver                        0x0000000100d6f63c chromedriver + 669244\nE       5   chromedriver                        0x0000000100d6ecb4 chromedriver + 666804\nE       6   chromedriver                        0x0000000100ce20c0 chromedriver + 90304\nE       7   chromedriver                        0x00000001010aac40 chromedriver + 4058176\nE       8   chromedriver                        0x00000001010af160 chromedriver + 4075872\nE       9   chromedriver                        0x0000000101072e68 chromedriver + 3829352\nE       10  chromedriver                        0x00000001010afc4c chromedriver + 4078668\nE       11  chromedriver                        0x0000000101087f08 chromedriver + 3915528\nE       12  chromedriver                        0x0000000100ce0ad8 chromedriver + 84696\nE       13  dyld                                0x0000000186533e50 start + 2544\n\n../../venv/lib/python3.11/site-packages/selenium/webdriver/remote/errorhandler.py:229: InvalidSessionIdException"}, "parameters": [{"name": "username", "value": "'admin'"}, {"name": "password", "value": "'admin'"}, {"name": "result", "value": "'fail'"}], "start": 1693484375617, "stop": 1693484387261, "uuid": "13f5538b-cac4-46cc-868d-1b9fa3019858", "historyId": "20715e0eedef31e5038b0d01689ec975", "testCaseId": "9142016a1a8fe0d040722d36e538fc14", "fullName": "tests.vwo_login.test_test.TestVWOLogin#test_vwologin", "labels": [{"name": "tag", "value": "@pytest.mark.usefixtures('setup')"}, {"name": "parentSuite", "value": "tests.vwo_login"}, {"name": "suite", "value": "test_test"}, {"name": "subSuite", "value": "TestVWOLogin"}, {"name": "host", "value": "Meghas-Mac-mini.local"}, {"name": "thread", "value": "42020-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "tests.vwo_login.test_test"}]}